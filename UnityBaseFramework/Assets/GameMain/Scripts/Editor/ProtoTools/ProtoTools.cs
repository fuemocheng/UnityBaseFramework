using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEditor;
using BaseFramework;

namespace XGame.Editor.Tools
{
    public sealed class ProtoTools
    {
        /// <summary>
        /// 自动生成Packet文件头部
        /// </summary>
        /// <returns></returns>
        private static string GetPacketAutoGenHead()
        {
            return
                "// <auto-generated>\n"
                + "//   This file was generated by a tool;\n"
                + "//   you should avoid making direct changes.\n"
                + "//   These types are extended from proto classes.\n"
                + "// </auto-generated>\n";
        }

        /// <summary>
        /// 自动生成Handler文件头部
        /// </summary>
        /// <returns></returns>
        private static string GetHandlerAutoGenHead()
        {
            return
                "// <auto-generated>\n"
                + "//   This file will only be generated once\n"
                + "//   and will not be overwritten.\n"
                + "//   You need to implement the 'Handle' function yourself.\n"
                + "// </auto-generated>\n";
        }

        [MenuItem("Tools/Generate All Proto")]
        private static void ExportProto()
        {
            ExportClientProto();
            ExportServerProto();
        }

        [MenuItem("Tools/Generate Client Proto")]
        private static void ExportClientProto()
        {
            // 设置批处理文件工作目录
            string workingPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto");

            // 批处理文件路径
            string batPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto/proto2cs_client.bat");

#if UNITY_EDITOR_WIN
            workingPath = workingPath.Replace("/", "\\");
            batPath = batPath.Replace("/", "\\");

            //执行bat文件
            EditorUtility.ExecuteBat(batPath, "", workingPath);

#elif UNITY_EDITOR_OSX
            workingPath = workingPath.Replace("\\", "/");
            batPath = batPath.Replace("\\", "/");

            //TODO
            //执行 shell 文件
#endif

            //生成 Client Packet 扩展类
            GenClientPacketExt();

            //生成 Client PacketHandler 处理类
            GenClientPacketHandler();

            AssetDatabase.Refresh();
        }

        [MenuItem("Tools/Generate Server Proto")]
        private static void ExportServerProto()
        {
            // 设置批处理文件工作目录
            string workingPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto");

            // 批处理文件路径
            string batPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto/proto2cs_server.bat");

#if UNITY_EDITOR_WIN
            workingPath = workingPath.Replace("/", "\\");
            batPath = batPath.Replace("/", "\\");

            //执行bat文件
            EditorUtility.ExecuteBat(batPath, "", workingPath);

#elif UNITY_EDITOR_OSX
            workingPath = workingPath.Replace("\\", "/");
            batPath = batPath.Replace("\\", "/");

            //TODO
            //执行 shell 文件
#endif

            //生成 Server Packet 扩展类
            GenServerPacketExt();

            //生成 Server PacketHandler 处理类
            GenServerPacketHandler();
        }

        /// <summary>
        /// 生成 Client Packet 扩展类
        /// </summary>
        private static void GenClientPacketExt()
        {
            // 要生成的文件目录
            string packetDir = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/Assets/GameMain/Scripts/Network/Packet");

            // Message配置文件路径
            string msgConfPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto/proto/Message.conf");

            if (!File.Exists(msgConfPath))
            {
                Debug.LogError("Cannot find Message.conf.");
                return;
            }

            string[] allLine = File.ReadAllLines(msgConfPath);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(GetPacketAutoGenHead());
            sb.AppendLine("using XGame;");
            sb.AppendLine();
            sb.AppendLine("namespace GameProto");
            sb.AppendLine("{");

            // message 自增ID
            int msgId = 1;
            // proto 文件
            string protoFile = "";

            foreach (string line in allLine)
            {
                // 遍历每一行，获取预定义的 pb 类名
                string pbClassName = line.Trim();
                if (string.IsNullOrEmpty(pbClassName))
                    continue;
                if (pbClassName.StartsWith("#"))
                {
                    protoFile = pbClassName.Replace("#", "").TrimStart() + ".proto";
                    continue;
                }

                // Packet数据包扩展
                sb.AppendLine($"    public partial class {pbClassName} : {GetBaseClass(pbClassName)}");
                sb.AppendLine($"    {{");
                sb.AppendLine($"        public override int Id => {msgId};");
                sb.AppendLine();
                sb.AppendLine($"        public override void Clear()");
                sb.AppendLine($"        {{");
                sb.Append(GetClearFun(protoFile, pbClassName));
                sb.AppendLine($"        }}");
                sb.AppendLine($"    }}");
                sb.AppendLine();

                // SC的数据包的 PacketHandler 扩展类
                if (pbClassName.StartsWith("SC"))
                {
                    sb.AppendLine($"    public partial class {pbClassName}Handler : PacketHandlerBase");
                    sb.AppendLine($"    {{");
                    sb.AppendLine($"        public override int Id => {msgId};");
                    sb.AppendLine($"    }}");
                    sb.AppendLine();
                }

                msgId++;
            }
            sb.AppendLine("}");

            // 最后导出到 PacketExt.cs 中
            File.WriteAllText($"{packetDir}/PacketExt.cs", sb.ToString());
        }

        /// <summary>
        /// 生成 ServerPacket 扩展类
        /// </summary>
        private static void GenServerPacketExt()
        {
            // 要生成的文件目录
            string packetDir = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Server/GameServer/Server/Game/Network/Packet");

            // Message配置文件路径
            string msgConfPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto/proto/Message.conf");

            if (!File.Exists(msgConfPath))
            {
                Debug.LogError("Cannot find Message.conf.");
                return;
            }

            string[] allLine = File.ReadAllLines(msgConfPath);

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(GetPacketAutoGenHead());
            sb.AppendLine("using Network;");
            sb.AppendLine();
            sb.AppendLine("namespace GameProto");
            sb.AppendLine("{");

            // message 自增ID
            int msgId = 1;
            // proto 文件
            string protoFile = "";

            foreach (string line in allLine)
            {
                // 遍历每一行，获取预定义的 pb 类名
                string pbClassName = line.Trim();
                if (string.IsNullOrEmpty(pbClassName))
                    continue;
                if (pbClassName.StartsWith("#"))
                {
                    protoFile = pbClassName.Replace("#", "").TrimStart() + ".proto";
                    continue;
                }

                // Packet数据包扩展
                sb.AppendLine($"    public partial class {pbClassName} : {GetBaseClass(pbClassName)}");
                sb.AppendLine($"    {{");
                sb.AppendLine($"        public override int Id => {msgId};");
                sb.AppendLine();
                sb.AppendLine($"        public override void Clear()");
                sb.AppendLine($"        {{");
                sb.Append(GetClearFun(protoFile, pbClassName));
                sb.AppendLine($"        }}");
                sb.AppendLine($"    }}");
                sb.AppendLine();

                // CS的数据包的 PacketHandler 扩展类
                if (pbClassName.StartsWith("CS"))
                {
                    sb.AppendLine($"    public partial class {pbClassName}Handler : PacketHandlerBase");
                    sb.AppendLine($"    {{");
                    sb.AppendLine($"        public override int Id => {msgId};");
                    sb.AppendLine($"    }}");
                    sb.AppendLine();
                }

                msgId++;
            }
            sb.AppendLine("}");

            // 最后导出到 PacketExt.cs 中
            File.WriteAllText($"{packetDir}/PacketExt.cs", sb.ToString());
        }

        /// <summary>
        /// 获取 pbClass 基类；
        /// </summary>
        /// <param name="pbClassName"></param>
        /// <returns></returns>
        private static string GetBaseClass(string pbClassName)
        {
            if (pbClassName.StartsWith("CS"))
            {
                return "CSPacketBase";
            }
            else if (pbClassName.StartsWith("SC"))
            {
                return "SCPacketBase";
            }
            return "PacketBase";
        }

        /// <summary>
        /// 根据 pb 结构体，生成它的Clear函数；
        /// </summary>
        /// <param name="protoFile"></param>
        /// <param name="pbClassName"></param>
        /// <returns></returns>
        private static string GetClearFun(string protoFile, string pbClassName)
        {
            string[] lines = GetPbAttrs(protoFile, pbClassName);
            if (lines != null)
            {
                StringBuilder sb = new StringBuilder();
                foreach (string line in lines)
                {
                    string[] v1 = line.Trim().Split('=');
                    string[] v2 = v1[0].Trim().Split(' ');
                    switch (v2[0])
                    {
                        case "repeated":
                            sb.AppendLine($"            {v2[2]}.Clear();");
                            break;
                        case "int32":
                        case "uint32":
                        case "sint32":
                        case "float":
                        case "double":
                            sb.AppendLine($"            {v2[1]} = 0;");
                            break;
                        case "bool":
                            sb.AppendLine($"            {v2[1]} = false;");
                            break;
                        default:
                            sb.AppendLine($"            {v2[1]} = default;");
                            break;
                    }
                }
                return sb.ToString();
            }
            return "";
        }

        /// <summary>
        /// 从 pb 文件中读取所有字段；
        /// </summary>
        /// <param name="protoFile"></param>
        /// <param name="pbClassName"></param>
        /// <returns></returns>
        private static string[] GetPbAttrs(string protoFile, string pbClassName)
        {
            string protoPath = Utility.Text.Format("{0}{1}{2}", Directory.GetCurrentDirectory(), "/../Common/Proto/proto/", protoFile);

            // 读取 proto 内容
            string content = File.ReadAllText(protoPath);

            Regex reg = new Regex(pbClassName + @"{([^}]*)}");
            MatchCollection mc = reg.Matches(content);
            if (mc.Count > 0)
            {
                string result = mc[0].ToString();
                result = result.Replace(pbClassName + "{", "");
                result = result.Replace("}", "").Trim();
                if (!string.IsNullOrEmpty(result))
                {
                    string[] lines = result.Split('\n');
                    return lines;
                }
            }
            return null;
        }

        /// <summary>
        /// 生成 Client PacketHandler 处理类；
        /// </summary>
        private static void GenClientPacketHandler()
        {
            string handlerDir = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/Assets/GameMain/Scripts/Network/PacketHandler");

            string msgConfPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto/proto/Message.conf"); ;
            if (!File.Exists(msgConfPath))
            {
                Debug.LogError("Cannot find Message.conf.");
                return;
            }

            string[] allLine = File.ReadAllLines(msgConfPath);
            foreach (string line in allLine)
            {
                // 遍历每一行，获取预定义的 pb 类名
                string pbClassName = line.Trim();
                if (string.IsNullOrEmpty(pbClassName) || pbClassName.StartsWith("#") || !pbClassName.StartsWith("SC"))
                    continue;

                string handlerPath = $"{handlerDir}/{pbClassName}Handler.cs";

                // 已经存在，则跳过生成；Handle函数可能需要写逻辑处理，不能覆盖；
                if (File.Exists(handlerPath))
                {
                    continue;
                }

                StringBuilder sb = new StringBuilder();
                sb.AppendLine(GetHandlerAutoGenHead());
                sb.AppendLine("using BaseFramework.Network;");
                sb.AppendLine("using UnityBaseFramework.Runtime;");
                sb.AppendLine("using XGame;");
                sb.AppendLine();
                sb.AppendLine("namespace GameProto");
                sb.AppendLine("{");
                sb.AppendLine($"    public partial class {pbClassName}Handler : PacketHandlerBase");
                sb.AppendLine($"    {{");
                sb.AppendLine($"        public override void Handle(object sender, Packet packet)");
                sb.AppendLine($"        {{");
                sb.AppendLine($"            {pbClassName} packetImpl = ({pbClassName})packet;");
                sb.AppendLine($"            Log.Info(\"Receive packet \'{{0}}\'.\", packetImpl.Id.ToString());");
                sb.AppendLine($"        }}");
                sb.AppendLine($"    }}");
                sb.AppendLine("}");

                File.WriteAllText(handlerPath, sb.ToString());
            }
        }

        /// <summary>
        /// 生成 Server PacketHandler 处理类；
        /// </summary>
        private static void GenServerPacketHandler()
        {
            string handlerDir = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Server/GameServer/Server/Game/Network/PacketHandler");

            string msgConfPath = Utility.Text.Format("{0}{1}", Directory.GetCurrentDirectory(), "/../Common/Proto/proto/Message.conf"); ;
            if (!File.Exists(msgConfPath))
            {
                Debug.LogError("Cannot find Message.conf.");
                return;
            }

            string[] allLine = File.ReadAllLines(msgConfPath);
            foreach (string line in allLine)
            {
                // 遍历每一行，获取预定义的 pb 类名
                string pbClassName = line.Trim();
                if (string.IsNullOrEmpty(pbClassName) || pbClassName.StartsWith("#") || !pbClassName.StartsWith("CS"))
                    continue;

                string handlerPath = $"{handlerDir}/{pbClassName}Handler.cs";

                // 已经存在，则跳过生成；Handle函数可能需要写逻辑处理，不能覆盖；
                if (File.Exists(handlerPath))
                {
                    continue;
                }

                StringBuilder sb = new StringBuilder();
                sb.AppendLine(GetHandlerAutoGenHead());
                sb.AppendLine("using BaseFramework.Runtime;");
                sb.AppendLine("using Network;");
                sb.AppendLine();
                sb.AppendLine("namespace GameProto");
                sb.AppendLine("{");
                sb.AppendLine($"    public partial class {pbClassName}Handler : PacketHandlerBase");
                sb.AppendLine($"    {{");
                sb.AppendLine($"        public override void Handle(object sender, Packet packet)");
                sb.AppendLine($"        {{");
                sb.AppendLine($"            {pbClassName} packetImpl = ({pbClassName})packet;");
                sb.AppendLine($"            Log.Info(\"Receive packet \'{{0}}\'.\", packetImpl.Id.ToString());");
                sb.AppendLine($"        }}");
                sb.AppendLine($"    }}");
                sb.AppendLine("}");

                File.WriteAllText(handlerPath, sb.ToString());
            }
        }
    }
}
